---
title: "Direct estimates of poverty and other supporting statistics"
# author: "Eduard Bukin" 
format: html
editor: source
params:
  eval_all: FALSE
  harvest: FALSE
editor_options: 
  chunk_output_type: console
---

```{r echo=FALSE}
# Recollect data from the sources?
if ("try-error" %in% class(try(params$eval_all)))
  params <- list(eval_all = FALSE, harvest = FALSE)
```

```{r}
#| label: setup
#| echo: false
#| warning: false
#| message: false
#| error: false

# Libraries
pacman::p_load(
  # biscale,
  convey,
  readxl,
  flextable, ftExtra, 
  knitr,
  scales, 
  data.table,
  tidyverse, 
  stringr,
  haven, 
  survey,
  pins
)

# Chunk setup
knitr::opts_chunk$set(
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  error = FALSE
)

# Loading locally-developed
list.files("R", pattern="*.R$", full.names=TRUE, ignore.case=TRUE) |> 
  walk(source)

# Raw data root
root_raw <- "./data/raw"
root_temp <- "./data/temp"
root_clean <- "./data/clean"

# Data-storage boards
bd_raw <- root_raw |> file.path("api") |> board_folder(versioned = T)
bd_aux <- root_temp |> board_folder(versioned = T)
bd_clean <- root_clean |> board_folder(versioned = T)

# Years range
range <- c(2011, 2019:2030)
```

## Overview

As a first step, we need to produce direct estimates of poverty, sampling error measures, poverty variances and covariances over time, as well as other supporting statistics (e.g., variances and covariances of poverty between years).

We usually rely on population-representative household-level (or individual-level) surveys, such as EU-SILC data.
Essentially, our survey data must contain only a limited set of variables to produce direct estimates.
These variables are:

-   One variable that indicates whether all individuals in the household (or an individual) -   are poor or at risk of poverty (AROP) and social exclusion (AROPE);
-   Unique region identifier;
-   Year;
-   Population weight;
-   Cluster, strata, and primary sampling unit relevant for deriving accurate standard errors.

In practice, however, any survey data requires selecting the right variables and often computing poverty status (AROP and AROPE) based on available income and household composition data.
This document takes us through the process of preparing data for and computing the direct estimates.
Overall, the process consists of:

Step 1. Combining relevant data from different years into a single data frame and renaming relevant variables, such as year, region IDs, cluster, strata, primary sampling unit, household IDs, weights, income measures, poverty lines, and other household characteristics.

Step 2. Extracting household-level characteristics (if the data is reported at the individual level).

Step 3. Preparing the poverty status variable and other relevant measures such as income per capita, poverty lines, and computing income in real terms using price adjustment indices (if relevant).

Step 4. Computing direct estimates, standard errors, variances, and covariances of poverty across years, as well as other characteristics (e.g., sample sizes, population sizes, etc.).

Step 5. Variance smoothing.

The resulting dataset should usually consist of the following columns:

```{r tbl-results-str}
#| tbl-cap: Structure of the resulting data with direct estimates
tribble(
  ~Variable, ~Description,
  "id", "Region ID",
  "year", "Year",
  "pov", "Direct estimates of poverty",
  "SD", "Standard errors of the direct estimates",
  "vardir", "Variance (SD^2)",
  "CV", "Coefficeint of variation (SD/pov)",
  # "var_SRS", "",
  # "deff", "",
  # "n_eff", "",
  "v_pov20XX", "Covariance between poverty in current year versus year 20XX (multiple columns)"
) |> 
  flextable() |> autofit()

```

## Step 1. Loading SILC Data and Renaming Variables

It is recommended to load all survey data for multiple years into a single data frame, adding a year column to each survey and selecting only a relevant set of variables.
The following columns are often needed:

-   Region/area identifier that must be unique for each region.
-   Primary Sampling Units or clustering variable (if available).
-   Population weights.
-   Year identifier.
-   Variable indicating poverty status of the household or individual. This variable may not exist in the survey and may need to be computed based on individual income and the poverty line:
    -   Income-related variables such as disposable or consumable income (often aggregated at the household level).
    -   Poverty line, which is a per capita or per adult-equivalent income threshold below which a person is considered poor. This may be a single value per year or a set of values differentiated by region, household type, etc.

The code below loads example SILC data for multiple years, selects, and renames relevant variables in a way that supports computing direct estimates of poverty and other indicators.

SILC data often includes the following relevant variables:


-   `db040`: Sub-national ID â€” must uniquely identify your geographic level.

-   `hhid`: Household identifier (possibly DB030).

-   `hx090`: Equivalised disposable income.

-   `hx040`: Household size.

-   `hx050`: Equivalised household size.

-   `rb050`: Personal cross-sectional weight.

-   `rx070`: At risk of poverty or social exclusion.

-   `psu`: First-stage randomization (possibly DB060).

-   `strata`: Stratum of the second-stage randomization (possibly DB062).

```{r dta-load}
# Individual data ---------------------------------------
dta_ind  <- 
  list.files("../Poland/data-eusilc/UDB_CR/", full.names = TRUE) |> 
  lapply(X = _, function(f) {
    f |>
      read_sav() |>
      transmute(
        year = as.integer(RB010), # Year
        hh_id = as.integer(RX030), # Household identifier
        ind_weight = as.numeric(RB050), # Personal cross-sectional weigh
        arope = as.integer(RX070) # At rist of poverty or sicial exclusion
      )
  }) |> 
  bind_rows() 

dta_ind |> group_by(year) |> summarise(sum(ind_weight))

# HH data -------------------------------------------------------
dta_hh_1  <- 
  list.files("../Poland/data-eusilc/UDB_CH/", full.names = TRUE) |> 
  map(~{
    .x |> 
      read_sav() |>
      transmute(
        year = as.integer(HB010), # Year
        hh_id = as.integer(HB030), # Household identifier
        inc_adeq = as.numeric(HX090), # Equivalised disposable income
        hh_size = as.integer(HX040), # Household size
        hh_size_adeq = as.integer(HX050) # Equivalised household size
      )
  }) |> 
  bind_rows()

# HH data -----------------------------------------
dta_hh <- 
  dta_ind |> 
  group_by(year, hh_id) |> 
  mutate(hh_size2 = n()) |> 
  group_by(year, hh_id, hh_size2) |> 
  summarise(
    hh_weight = sum(ind_weight),
    arope = first(arope)
  ) |> 
  ungroup() |> 
  left_join(dta_hh_1, join_by(hh_id, year))

dta_hh |> group_by(year) |> summarise(sum(hh_weight))

# Region MT ------------------------------------
powiat_podregion_codes <-
  read_xlsx("../Poland/data-other/powiat-podregion-codes.xlsx") |>
  dplyr::select(powiat_id, subcode = podregion_id)

# Sampling frame -------------------------------------
path_silc_data <- "../Poland/data-eusilc/national"
all_files <- list.files(path_silc_data, full.names = TRUE) 

# dta_exmpl <- all_files[5] |> read_sav()
dta_hh_loc <- 
  list.files(path_silc_data, full.names = TRUE) |> 
  map(~{
    dta <- .x |> read_sav() 
    if (!"db095" %in% names(dta)) dta <- dta |> mutate(db095 = NA_real_)
    dta |>
      transmute(
        year = as.integer(db010), # year
        hh_id = as.integer(DB030), # household id
        rotation = as.character(db075),
        psu = as.character(db060), # First stage randomization
        ssu = as.character(db062), # First stage randomization
        strata = as.character(db050), # Stratum of the second stage randomization
        symter = as.character(symter), # TERYT
        long_weight = as.numeric(db095)
      )
  }) |> 
  bind_rows() |> 
  mutate(
    powiat_id  = str_sub(symter, 1, 4)
  ) |> 
  left_join(powiat_podregion_codes, by = join_by(powiat_id))

# household id -------------------------------------------------------
hidmap_h <- 
  list.files("../Poland/data-eusilc/HIDMAP/", full.names = TRUE, pattern = "_h") |>
  lapply(function(f) {
    f |>
      read.csv() |>
      transmute(
        year = as.integer(DB010), # Year
        hh_id = as.integer(R_DB030), # Household identifier
        hh_id2 = as.integer(DB030)
      )
  }) |> 
  bind_rows() |> 
  as_tibble()


dta1 <- 
  dta_hh |> 
  left_join(dta_hh_loc, by = join_by(year, hh_id)) |>
  left_join(hidmap_h, by = c("year", "hh_id")) |>
  mutate(hh_id = ifelse(is.na(hh_id2), hh_id, hh_id2)) |>
  select(-hh_id2)


dta1 |>
  filter(year != 2011) |> 
  count(hh_id) |> count(n) |> 
  summarise(sum(nn))

dta1 |> group_by(year) |> summarise(across(contains("weight"), ~sum(.)))
# dta1 |> count(year, is.na(hh_id2))

# dta1 <-
#   dta1 |>
#   mutate(hh_id = ifelse(is.na(hh_id2), hh_id, hh_id2)) |>
#   select(-hh_id2)

dta1 |>
  arrange(hh_id) |> 
  filter(year != 2011) |>
  count(hh_id, name = "nobs") |>
  count(nobs, name = "nhh")

dta1 |> 
  filter(year != 2011) |>
  mutate(year_rotation = paste(year, rotation, sep = "_")) |>
  mutate(n = 1) |>
  select(hh_id, year_rotation, n) |>
  arrange(year_rotation) |>
  pivot_wider(names_from = year_rotation, values_from = n) |>
  count(pick(starts_with("2")), name = "nhh") |>
  rowwise() |>
  mutate(nobs = sum(pick(starts_with("2")), na.rm = TRUE)) |> 
  print(n=100)

# dta1 <- 
#   dta0 |> 
#   # We select and rename survey variable into the relevant names
#   # hhid, id, psu, strata, and others if needed. Use syntax:
#   # select(NEW_WAR_NAME = OLD_VAR_NAME). All names are case-sensitive
#   # This function only returns variables that are being selected, while all
#   # other variables are being dropped.
#   select(
#     id = db040,
#     year = year,
#     psu = psu,          # Primary sampling unit of the HH.
#     strata = strata,    # Strata if available
#     hh_id = hhid,       # For the HH-level data we need HH id.
#     hh_weight = rb050,  # Individual weights in the household
#     hh_size = hx040,    # Size of HH individuals
#     hh_size_adeq = hx050, #Size of the HH in adult equivalent
#     inc_adeq = hx090,   # Income per adult equivalent or other types on income
#     arope = rx070       # Individual is at risk of poverty and social exclusion
#   ) |> 
#   
#   # Clean any Stata-related metadata
#   zap_labels()
```

Resulting data has the structure displayed below.

Note that this exemplary survey data is:

-   Created at the level of the individual, where household-related characteristics repeat for each individual.

-   Does not have population weight, but rather contains household weights and the household size.

-   Contains nominal income at the level of adult equivalent, which could be converted to the per capita income (if needed).

-   Does not contain the poverty line, which has to be determined as 60% of the median income.

```{r dta1-glimpse}
glimpse(dta1)
```

## Step 2.1 Extracting household level characteristics

Since our data is at the individual level, all household level characteristics are constant for each individual. 
Besides, income and other characteristics are already pre-computed in our case.
Therefore, to extract them at the household level, we need to group by household id and extract first value of each variable.

```{r dta2-hhlevel}
dta2 <- dta1 
```

Resulting data is smaller in size, however, if done correctly, the product of the HH weight and size summed over years should return the size of the population in the country.

```{r dta2-check}
dta2 |>
  group_by(year) |> 
  summarise(pop_size = sum(hh_weight, na.rm = T)) |>
  glimpse()
```

## Step 2.2 Exploratory analysis of the survey structure

Checking the panel structure.

Panel structure does exist between 2022 and 2023.

```{r dta-explore, eval=FALSE}
dta_multiple <-
  dta2 |> 
  filter(year > 2021) |> 
  group_by(
    symter,  powiat_id, subcode, hh_id, rotation 
  ) |> 
  count(sort = T) |> 
  ungroup()

dta2 |> 
  filter(year > 2021) |> 
  # count(hh_id, hh_weight)
  select(symter,  powiat_id, subcode, hh_id, rotation, year, long_weight) |> 
  mutate(n = 1) |> 
  pivot_wider(names_from = c(year, rotation), values_from = n, values_fill = 0) |> 
  mutate(sum = `2022_1` + `2022_2` + `2022_3` + `2022_4` + `2023_2` + `2023_3` + `2023_4` + `2023_1`) |>
  group_by(pick(matches("\\d{4}"))) |>
  summarise(long_weight = sum(long_weight)) |> 
  count()

dta_multiple |> slice(1:2) |>
  left_join(dta2)
```


## Step 3. Precomputing poverty status and other relevant variables

As our data does not contains poverty status of all individuals in the HH (each individual), population weights, income per capita, and poverty line, we reconstruct those.
Note that poverty line is defined as 60% of the median income. 
Median income has to be computed for each year separately taking into consideration the population weights.
Below we compute this variables and name them in a standardized way so that they can be used nearly automatically for calculating direct estimates of poverty and variances.

```{r dta3-step3}
cpi_dta <-
  tribble(
    ~year, ~cpi, ~cpi_2019,
    2019,	102.3, 1.,
    2020,	103.4, 0.967117988,
    2021,	105.1, 0.920188381,
    2022,	114.4, 0.804360473,
    2023,	111.4, 0.722047103
    ) 

dta3 <-
  dta2 |>
  left_join(cpi_dta, by = join_by(year)) |> 
  # We must group by country/year in order to compute all statistics on the annual basis.
  group_by(year) |>
  mutate(
    inc_pc = (inc_adeq * hh_size_adeq) / hh_size, # HH disposable income per capita
    povetry_line =  0.6 * Hmisc::wtd.quantile(
      x = inc_adeq,
      weights = hh_weight,
      probs = 0.5,
      na.rm = TRUE),
    povetry_line_2019 = ifelse(year == 2019, povetry_line, NA_real_)
    
    ) |>
  ungroup() |>
  fill(povetry_line_2019, .direction = "downup") |> 
  mutate(
    arop = as.integer(inc_adeq < povetry_line),
    arop19 = as.integer(inc_adeq*cpi_2019 < povetry_line_2019),
    arope = ifelse(is.na(arope), NA, as.numeric(arope != 0))
    ) 

# dta3 |> filter(year != 2011) |> 
#   filter(arop != arop19) |> 
#   count(year)
dta3 |>  glimpse()
```

## Step 4. Direct Poverty Estimates and Covariances

To compute any statistics based on our survey data, we use the survey R package and apply the survey design structure.
If, at the previous stage, all variables were pre-computed correctly, no changes to the code are needed at this stage.
If any of the variables such as `cluster`, `strata`, or `weight` are not present in the data because the survey design did not foresee them, it is recommended to create such variables and populate them with a constant value of one (1) for all observations.

Finally, some survey designs may include finite population correction and cluster sampling probabilities.
If these are present in the data, check the documentation for the `?survey::svydesign` function and incorporate them using the `fpc` and `probs` arguments, respectively, in the same way as cluster and strata are used below.

### Direct Estimates of Poverty and Associated Statistics

Before estimating the direct poverty measures, we define the relevant variable names.
Then, we compute the sample and population sizes per region, as well as the direct estimates and supporting statistics described in @tbl-results-str.

```{r dir-est-setup}
#| echo: true

# Relevant variable
area_var <- "subcode"  # Area ID
hhid_var <- "hh_id"
year_var <- "year"    # Year
cluster_var <- c("psu", "ssu") 
strata_var <- "strata"
weight_var <- "hh_weight" 
poverty_var <- c("arop", "arope", "arop19")

# Sample and population sizes 
dta4_size <- 
  dta3 |>
  group_by(pick(any_of(c(area_var, year_var)))) |>
  summarize(
    N = n(),
    N_pop = sum(.data[[weight_var]]),
    .groups = "drop")

# Helper function to create formulas from strings
check_null <- function(x) {
  if (is.null(x)) {
    ~ 0
  } else {
    return(as.formula(str_c("~", str_c(x, collapse = "+"))))
  }
}

# Survey design object 
dta4_design_11 <-
  survey::svydesign(
    ids = check_null(cluster_var), 
    strata = check_null(strata_var),
    weights = check_null(weight_var),
    data = dta3 |> filter(year == 2011),
    nest = TRUE         # Set nesting to FALS if you are sure that 
                        # PSU are defined uniqiely accross clusters
  )

dta4_design_19 <-
  survey::svydesign(
    ids = check_null(cluster_var), 
    strata = check_null(strata_var),
    weights = check_null(weight_var),
    data = dta3 |> filter(year != 2011),
    nest = TRUE         # Set nesting to FALS if you are sure that 
                        # PSU are defined uniqiely accross clusters
  )

options(survey.lonely.psu = "adjust")

# Direct estimates
dta4_direct_11 <-
  survey::svyby(
    formula = check_null(c("arop", "arope")),
    by = check_null(c(area_var, year_var)),
    design = dta4_design_11,
    FUN = survey::svymean
  ) |>
  as_tibble()

dta4_direct_19 <-
  survey::svyby(
    formula = check_null(poverty_var),
    by = check_null(c(area_var, year_var)),
    design = dta4_design_19,
    FUN = survey::svymean
  ) |>
  as_tibble()

dta4_direct0 <- 
  dta4_direct_19 |> 
  bind_rows(dta4_direct_11) |> 
  pivot_longer(contains("arop")) |> 
  filter(!is.na(value)) |> 
  separate(name, into = c("var", "type")) |> 
  mutate(type = ifelse(is.na(type), var, type),
         var = ifelse(var != "se", "pov", var)) |> 
  pivot_wider(names_from = var, values_from = value) 

# # Check
# dta4_direct |> 
#   group_by(year) |> 
#   summarise(across(c(pov, se), list(~mean(.), ~sd(.))))

dta4_direct <-
  dta4_direct0 |>
  rename(SD = se) |>
  mutate(
    # pov = pov,
    # SD = SD,
    vardir = SD ^ 2,
    CV = SD / pov
    ) |>
  left_join(dta4_size, by = c(area_var, year_var)) |> 
  mutate(var_SRS = pov * (1 - pov) / N) |>
  mutate(deff = vardir / var_SRS) |>
  mutate(n_eff = N / deff)
```

### Mean and median income

```{r}
dta5_inc <-
  survey::svyby(
    formula = inc_adeq,
    by = check_null(c(area_var, year_var)),
    design = dta4_design_11,
    FUN = survey::svymean
  ) |>
  as_tibble()

```

### Poverty gap

```{r}
svyby( ~ ftotval , ~ sex , cps_family_design , svyrmpg)
```


Resulting data set has the following structure:

```{r}
# dta4_direct |> glimpse()
```

### Covariances

Computing covariances between years is a complex task.
The main challenge lies in the need for a panel structure across all years. However, attrition and the rotating nature of the surveys make this impossible.
Therefore, we consider a set of covariance configurations. Specifically:

Covariances between years on a balanced panel across all years.
Covariances on a balanced panel from pairs of years.
Covariances on a panel created based on other aggregation variables such as PSU or similar.

#### Balanced Panel and Pairvise covariance

For balanced panel covariances, we first need to construct a panel dataset and then compute the covariances.
To do this, we pivot the data for household-specific poverty statuses into a wide format and then compute variance-covariance matrices, dropping any rows with missing observations.

```{r dta-vcov}
# poverty_var_local <- poverty_var[[1]]
all_covs <- 
  poverty_var |>
  map(~ {
    poverty_var_local <- .x
    
    dta4_wide <-
      dta3 |>
      select(all_of(
        c(
          area_var,
          hhid_var,
          cluster_var,
          strata_var,
          weight_var ,
          year_var,
          poverty_var_local
        )
      )) |>
      mutate(strata = ifelse(nchar(strata) == 4, str_c("0", strata), strata)) |>
      group_by(hh_id) |>
      mutate(hh_weight = mean(hh_weight), hh_id  = as.character(hh_id)) |>
      filter(year != 2011) |>
      pivot_wider(
        id_cols = all_of(c(
          area_var, hhid_var, cluster_var, strata_var, weight_var
        )),
        names_from = year_var,
        values_from = all_of(poverty_var_local),
        names_glue = "{.value}{year}",
        values_fn = first
      ) |>
      ungroup()
    
    pov_vars_list <- dta4_wide |> select(contains(poverty_var_local)) |> names()
    
    dta4_vcov_1 <-
      compute_vcov(
        dt = dta4_wide,
        domain = area_var,
        ids = cluster_var,
        strata = strata_var,
        weights = weight_var,
        yvars = pov_vars_list,
        na.rm = TRUE
      )
    
    dta4_vcov_2 <-
      compute_vcov_pairs(
        dt = dta4_wide,
        domain = area_var,
        ids = cluster_var,
        strata = strata_var,
        weights = weight_var,
        yvars = pov_vars_list,
        na.rm = TRUE
      ) |>
      ungroup()
    
    dta4_vcov_1 |> 
      mutate(vcov_type = "balanced") |>
      bind_rows(dta4_vcov_2 |> mutate(vcov_type = "paired")) |>
      pivot_longer(c(matches("^v_"), contains("n_"))) |>
      filter(!is.na(value)) |>
      filter(value > 0) |>
      separate(name, into = c("from", "to"), sep = "__") |>
      separate(from, into = c("variable", "from"), sep = "_") |>
      mutate(variable = ifelse(variable == "v", "covariance", "N"))
  }) |> 
  bind_rows()


```

Here is what the results look like:

```{r, echo = TRUE}
glimpse(all_covs)
# glimpse(dta4_vcov_2)
```

## Step 5. Variance smoothing

A quick inspection of the preceding results will show some provinces contain low sample sizes which sometimes result in extreme value poverty rates and hence 0 variance. To avoid this, we will show you how to apply the variance smoothing method suggested by [@you2023application]. Please see the code and Roxygen comments below explaining the use of the `varsmoothie_king()` function which computes smoothed variances.

The goal now is to use the above `varsmoothie_king()` function to add additional columns of smoothed variances into our `var_dt` object.

```{r dir-est-var-smooth}
# echo: true
# varcols <- dta4_vcov_1 |> select(starts_with("v_")) |> names()
# dta4_smooth <- dta4_vcov_1 |> 
#   left_join(dta4_direct |>
#               filter(year == first(year)) |>
#               select(id, N), by = join_by(id))
# dta4_smooth <-
#   lapply(X = varcols,
#          FUN = function(x){
#            z <- varsmoothie_king(domain = dta4_smooth[[area_var]],
#                                  direct_var = dta4_smooth[[x]],
#                                  sampsize = dta4_smooth[["N"]]) |>
#              as.data.table() |>
#              setnames(old = "var_smooth", new = paste0("vs", x)) |>
#              as_tibble()
#            return(z)
#          }) |> 
#   reduce(left_join, by = join_by(Domain)) |> 
#   rename(id = Domain) |> 
#   left_join(dta4_vcov_1, by = join_by(id)) |> 
#   as_tibble()
```

Now, you can replace the zero/near zero sample size area MSEs with their smoothed variances.

## Saving the results

```{r saving}
bd_clean |> pin_write(dta4_direct, name = "pov_direct", type = "rds")
bd_clean |> pin_write(all_covs, name = "pov_vcov", type = "rds")
# bd_clean |> pin_write(dta4_vcov_2, name = "pov_vcov_paired", type = "rds")
```

## Displaying the direct estimates results

```{r plotting}
library(sf)
library(ggplot2)
library(cowplot)
library(glue)
library(scales)
library(patchwork)
library(biscale)

geoms <- "../Poland/outputs/shp_dt.rds" |> readRDS()

pov_direct <- bd_clean |> pin_read("pov_direct")

geom_nuts2 <- 
  geoms |> 
  mutate(province = str_sub(subcode, 1, 5)) |> 
  group_by(province) |> 
  summarise() |> 
  ungroup() |> 
  st_make_valid()

dta_geom_dir <-
  geoms |> 
  left_join(pov_direct, by = join_by(subcode)) |> 
  as_tibble() |> 
  st_as_sf() |> 
    filter(type == "arop")

all_plots <-
  dta_geom_dir$year |>
  unique() |>
  map( ~ {
    data <-
      dta_geom_dir |>
      # mutate(pov2 = cut(pov, breaks = c(0, 10, 15, 20, 30, ceiling(max(dta_geom_dir$pov)))/ 100) |> 
      #          fct_rev()) |> 
      
      filter(year == .x) 
    map <-
      ggplot() +
      geom_sf(
        data = data,
        mapping = aes(fill = pov),
        color = "white",
        size = 0.1
      ) +
      scale_fill_viridis_c("Poverty rate") +
      labs(title = glue("Direct estimates in {.x}")) +
      theme_bw() + 
      geom_sf(data = geom_nuts2, fill = NA, colour = "red")
    set_names(list(map), .x)
  }) |> 
  unlist(recursive = F)

all_plots_one <- 
  all_plots |>
  reduce( ~ .x + .y)

ggsave(
  filename = glue("output/pov-direct-all.png"),
  plot = all_plots_one,
  width = 12,
  height = 8
)



all_plots2 <-
  dta_geom_dir$year |>
  unique() |>
  map( ~ {
    data <-
      dta_geom_dir |>
      filter(year == .x) 
    map <-
      ggplot() +
      geom_sf(
        data = data,
        mapping = aes(fill = SD),
        color = "white",
        size = 0.1
      ) +
      scale_fill_viridis_b("SE") +
      labs(title = glue("Direct estimates in {.x}")) +
      theme_bw() + 
      geom_sf(data = geom_nuts2, fill = NA, colour = "red")
    set_names(list(map), .x)
  }) |> 
  unlist(recursive = F)

all_plots_one_2 <- all_plots2 |> reduce( ~ .x + .y) 

ggsave(
  filename = glue("output/pov-direct-all-sd.png"),
  plot = all_plots_one_2,
  width = 12,
  height = 8
)



all_plots3 <-
  dta_geom_dir$year |>
  unique() |>
  map( ~ {
    data <-
      dta_geom_dir |>
      filter(year == .x) 
    map <-
      ggplot() +
      geom_sf(
        data = data,
        mapping = aes(fill = CV),
        color = "white",
        size = 0.1
      ) +
      scale_fill_viridis_b("CV", n.breaks = 8) +
      labs(title = glue("Direct estimates in {.x}")) +
      theme_bw() + 
      geom_sf(data = geom_nuts2, fill = NA, colour = "red")
    set_names(list(map), .x)
  }) |> 
  unlist(recursive = F)

all_plots_one_3 <- all_plots3 |> reduce( ~ .x + .y) 

ggsave(
  filename = glue("output/pov-direct-all-cv.png"),
  plot = all_plots_one_3,
  width = 12,
  height = 8
)

dta_geom_dir$year |> 
  unique() |> 
  walk(~{
    
    data <-
      dta_geom_dir |>
      filter(year == .x) |>
      bi_class(x = pov,
               y = SD,
               style = "quantile",
               dim = 3)
    
    map <-
      ggplot() +
      geom_sf(
        data = data,
        mapping = aes(fill = bi_class),
        color = "white",
        size = 0.1,
        show.legend = FALSE
      ) +
      bi_scale_fill(pal = "GrPink", dim = 3) +
      labs(title = glue("Direct estimates in {.x}")) +
      bi_theme()
    
    legend <- bi_legend(
      pal = "GrPink",
      dim = 3,
      xlab = "Higher poverty",
      ylab = "Higher SD",
      size = 8
    )
    
    finalPlot <-
      ggdraw() +
      draw_plot(map, 0, 0, 1, 1) +
      draw_plot(legend, 0.15, 0, 0.2, 0.2)
    
    
    ggsave(
      filename = glue("output/pov-direct-{.x}.png"),
      plot = finalPlot,
      width = 8,
      height = 6
    )
  })

dta_geom_dir |>
  filter(year == 2022) |> 
  mutate(
    nuts3_name = str_c(nuts3_name, " (", N, ")"),
    nuts3_name = as_factor(nuts3_name) |> fct_reorder(N)) |> 
  ggplot() + 
  aes(x = nuts3_name, y = CV) + 
  geom_bar(stat = "identity") + 
  theme_bw() + 
  ggplot2::coord_flip()
  scale_x_discrete() |>
  theme(text)
  geom_bar()
  group_by()
  
library(ggrepel)
dta_geom_dir |>
  filter(year == 2022) |> 
  ggplot() + 
  aes(x = N, y = CV, label = nuts3_name) + 
  geom_point() + 
  geom_smooth(se=T) + 
  ggrepel::geom_label_repel()


dta_geom_dir |>
  filter(year == 2022) |> 
  ggplot() + 
  aes(x = N, y = SD, label = nuts3_name) + 
  geom_point() + 
  geom_smooth(se=T) + 
  ggrepel::geom_label_repel(force = T, max.overlaps = 100)

# unique(dta_geom_dir$year) |>
#   map(~{
#     out <-
#       dta_geom_dir |>
#       filter(year == .x) |>
#       ggplot() +
#       aes(fill = pov) +
#       scale_fill_viridis_b() +
#       geom_sf() +
#       theme_bw() +
#       labs(title = .x)
# 
#     # browser()
# 
#   }) |>
#   reduce(~ .x +.y)
```

