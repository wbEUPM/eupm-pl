---
title: "The Univariate Fay-Herriot (UFH) model"
author: 
  - "Sylvia Harmening"
  - "Eduard Bukin"
format: html
editor: source
bibliography: references.bib
editor_options: 
  chunk_output_type: console
---

```{r, echo = FALSE, include = FALSE, warning = FALSE, message=FALSE, error =  FALSE}
#| label: setup
#| echo: true
#| warning: false
#| message: false
#| error: false

# Chunk setup
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE,
  error = FALSE
)

pacman::p_load(
  tidyverse,
  sf, 
  data.table, 
  msae,
  sae, 
  pins,
  emdi, 
  scales, 
  patchwork,
  tictoc,
  conflicted
)

conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::first)

# Loading locally-developed
list.files("R", pattern="*.R$", full.names=TRUE, ignore.case=TRUE) |> 
  walk(source)

# Raw data root
root_raw <- "./data/raw"
root_temp <- "./data/temp"
root_clean <- "./data/clean"

# Data-storage boards
bd_raw <- root_raw |> file.path("api") |> board_folder(versioned = T)
bd_aux <- root_temp |> board_folder(versioned = T)
bd_clean <- root_clean |> board_folder(versioned = T)
bd_out <- "output/res-40-fh" |> board_folder(versioned = T)
```

## Loading data

```{r dta-load}
#| echo: TRUE
# Data loading -------------------------------------------------------------

## Variable names ---------------------------------------------------------
area_var <- c("id") 
year_var <- "year"
directpov <- "pov"
directvar <- "vardir"
year_set <- c(2019:2023)

## Direct -----------------------------------------------------------------
pov_direct <- bd_clean |> pin_read("pov_direct") |> 
  rename(id = subcode) |> mutate(estimate = "Direct")

## RHS variables ---------------------------------------------------------
rhs_dta <- bd_clean |> pin_read("rhs_dta")
rhs_meta <- bd_clean |> pin_read("rhs_meta")

### Log transformation ---------------------------------------------------
var_to_log <- 
  rhs_dta |>
  pivot_longer(contains("x"), 
               names_to = "var",
               cols_vary = "slowest") |>
  group_by(year, var) |> 
  summarise(min = min(value), max = max(value)) |> 
  filter(min * 10 < max & max > 10 | max > 100) |> pull(var) |> unique()

rhs_dta1 <- 
  rhs_dta |>
  group_by(year) |>
  mutate(
    net_mig = x29
  ) |> 
  mutate(across(all_of(var_to_log), ~ log(.))) |> 
  mutate(x29 = net_mig) |> 
  select(-net_mig) |> 
  ungroup()
```

## UFH across years, dependent variabels, optimization methods and criterias

Run manually and save results, please.

```{r est-mfh}
#| eval: false

run_save_fh <- function(prefix, candidate_vars, pov_local = pov_direct) {

# UFH in a loop ---------------------------------------------------------------
# prefix <- "fh_model__10_v2_avar__"

for (method in c("reml")) { ###}, "ml")) {
for (criteria in c("AIC")) { ###}, "BIC")) {
for (type_poverty in "arop") { #unique(pov_direct$type)) {
for (i in as.character(year_set)){
  
  # browser()
  # try({
  survey_dt_tmp <- pov_local |> filter(year == i, type == type_poverty)
  rhs_dt_tmp <- rhs_dta1  |> filter(year == as.character(as.numeric(i)))
  
  dta_ufh <-
    rhs_dt_tmp |> 
    select(-year) |> 
    left_join(survey_dt_tmp, by = join_by(!!area_var)) |> 
    select(-where(~any(is.na(.))))
  
  # candidate_vars <- dta_ufh |> select(contains("x")) |> names()
  # candidate_vars <- c("x4", "x5", "x11",  "x29",
  #                     "x31", "x3", "x22", "x42", "x19")
  #                     # , "x30", "x2")
  
  # Variable selection
  fh_step <- step_wrapper_fh(dt = dta_ufh,
                             xvars = candidate_vars,
                             y = "pov",
                             cor_thresh = 0.7,
                             criteria = criteria,
                             vardir = "vardir", 
                             transformation = "arcsin", 
                             eff_smpsize = "N",
                             method = "ml")
  
  # Run model
  # browser()
  set.seed(123)
  fh_model <- fh(fixed = formula(fh_step$fixed),
                 # fixed = str_c("pov ~",
                 #   str_c(candidate_vars, collapse = "+")) |>
                 #   as.formula(),
                 vardir = "vardir", 
                 combined_data = as.data.frame(dta_ufh), 
                 domains = "id",
                 method = method, 
                 transformation = "arcsin", 
                 backtransformation = "bc",
                 eff_smpsize = "N", 
                 MSE = TRUE, 
                 mse_type = "boot", B = c(200, 0))
  
  bd_aux |> pin_write(
    fh_model,
    name = paste0(prefix, type_poverty, "__", 
                  criteria, "__", method, "__", i),
    type = "rds"
  )
  # }, silent = TRUE)
}
}
}
}

# Saving UFH results in a table --------------------------------------------------------------
pov_fh <- tibble()

for (method in c("reml")) { ###}, "ml")) {
for (criteria in c("AIC")) { ###}, "BIC")) {
for (type_poverty in "arop") { #unique(pov_direct$type)) {
for (i in as.character(year_set)){
  
  try({
    
  fh_model <- bd_aux |>
    pin_read(name = paste0(prefix, type_poverty, "__", 
                           criteria, "__", method, "__", i))
  
  # Save results
  pov_fh_tmp <-
    as_tibble(estimators(fh_model, MSE = TRUE, CV = TRUE)) |>
    select(!!area_var := Domain,
           pov = FH,
           MSE = FH_MSE,
           CV = FH_CV) |>
    mutate(
      year = i,
      estimate = "UFH",
      type = type_poverty,
      criteria = criteria,
      method = method,
      re = fh_model$model$random_effects[, 1],
      n_var = length(coef(fh_model)) - 1,
      r2_adj = fh_model$model$model_select$AdjR2,
      r2_fh = fh_model$model$model_select$FH_R2
    )
  
  pov_fh <- bind_rows(pov_fh, pov_fh_tmp)
  
  
  }, silent = TRUE)
}}}}


bd_clean |>
  pin_write(x = pov_fh,
            name = prefix,
            type = "rds")

}

run_save_fh(prefix = "fh_model__6_final_avar__",
            candidate_vars = c("x4", "x5", "x11", "x29", "x31", "x3"))

run_save_fh(prefix = "fh_model__9_final_1_avar__",
            candidate_vars = c("x4", "x5", "x11", "x29", "x31", 
                               "x3", "x22", "x42", "x19"))

pov_anchored <- pov_direct |> filter(type == "arop19") |> mutate(type = "arop")
run_save_fh(prefix = "fh_model__9_final_AROP19__",
            pov_local = pov_anchored,
            candidate_vars = c("x4", "x5", "x11", "x29", "x31", 
                               "x3", "x22", "x42", "x19"))
```

## UFH Diagnostics

```{r}
stars.pval <- function(x){
  stars <- c("***", "**", "*", "")
  var <- c(0, 0.01, 0.05, 0.10, 1)
  i <- findInterval(x, var, left.open = T, rightmost.closed = T)
  stars[i]
}

get_mhf_reg <- function(prefix) {
# prefix <- "fh_model__9_final_1_avar__"

#### Post estimation analysis
fh_model_2019 <- bd_aux |> pin_read(str_c(prefix, "arop__AIC__reml__2019"))
fh_model_2020 <- bd_aux |> pin_read(str_c(prefix, "arop__AIC__reml__2020"))
fh_model_2021 <- bd_aux |> pin_read(str_c(prefix, "arop__AIC__reml__2021"))
fh_model_2022 <- bd_aux |> pin_read(str_c(prefix, "arop__AIC__reml__2022"))
fh_model_2023 <- bd_aux |> pin_read(str_c(prefix, "arop__AIC__reml__2023"))

coef_part <-
list(
  `2019` = fh_model_2019, 
  `2020` = fh_model_2020, 
  `2021` = fh_model_2021, 
  `2022` = fh_model_2022, 
  `2023` = fh_model_2023
) |> 
  imap(~{
    var_name <- str_c("year", as.character(.y))
    # browser()
    .x$model$coefficients |> 
      mutate(stat = str_c(number(coefficients, 0.001), stars.pval(p.value))) |> 
      rownames_to_column() |> 
      select(rowname , stat) |> 
      rename({{var_name}} := stat) |> 
      as_tibble()
  }) |> 
  reduce(full_join, by = join_by(rowname)) 

gof_part <- 
  list(
  `2019` = fh_model_2019, 
  `2020` = fh_model_2020, 
  `2021` = fh_model_2021, 
  `2022` = fh_model_2022, 
  `2023` = fh_model_2023
) |> 
  imap(~{
    var_name <- str_c("year", as.character(.y))
    # browser()
    .x$model$model_select |> 
      t() |>
      as.data.frame() |> 
      rownames_to_column() |> 
      rename({{var_name}} := 2) |> 
      as_tibble()
  }) |> 
  reduce(left_join, by = join_by(rowname)) |> 
  mutate(across(where(is.numeric), ~ number(., 0.001)))

coef_part |> bind_rows(gof_part)

}
```

### 6-variable start

```{r}
get_mhf_reg("fh_model__6_final_avar__")
```

### 9-variable start

```{r}
get_mhf_reg("fh_model__9_final_1_avar__")
```

### AROP19

```{r}

get_mhf_reg("fh_model__9_final_AROP19__")
```


## Mapping and plotting

```{r}
geoms <-  bd_clean |> pin_read("geometries")
geom_nuts3 <- geoms$level4 
geom_nuts2 <- geoms$level2

pov_direct <- 
  bd_clean |> pin_read("pov_direct") |> mutate(estimate = "Direct") |> 
  select(id = subcode, year, type, estimate, pov, 
         MSE = vardir, RMSE = SD, CV, N, N_pop) |> 
  glimpse()

pov_dta <- 
  bd_clean |> pin_read("fh_model__6_final_avar__") |> 
  mutate(estimate = str_c(estimate, " 6 var")) |>
  bind_rows(bd_clean |>
              pin_read("fh_model__9_final_1_avar__") |> 
              mutate(estimate = str_c(estimate, " 9 var"))) |>
  # bind_rows(bd_clean |>
  #             pin_read("fh_model__9_final_AROP19__") |> 
  #             mutate(estimate = str_c(estimate, " AROP 19 (9 var)"))) |>
  bind_rows(bd_clean |> pin_read("pov_mfh") |>
              mutate(year = as.character(year)) |> 
              filter(estimate %in% c("MFH2 (0 cov)"))) |>
  mutate(RMSE = sqrt(MSE)) |> 
  mutate(year = as.numeric(year)) |> 
  bind_rows(pov_direct) |> 
  left_join(pov_direct |> select(id, year, type, direct_pov = pov, 
                                 direct_MSE = MSE, direct_CV = CV,
                                 direct_RMSE = RMSE, direct_N = N,
                                 direct_N_pop = N_pop) |> 
              st_drop_geometry(),
            by = join_by(id, year, type)) |> 
  left_join(geom_nuts3, by = join_by(id)) |> as_tibble() |> st_as_sf() |> 
  filter(type == "arop", #year %in% year_range,
         is.na(criteria) | criteria %in% "AIC",
         is.na(method) | method %in% "reml") |> 
  mutate(name = str_remove(name, "PODREGION")) |> 
  filter(year %in% 2019:2024)


pov_dta |> st_drop_geometry() |> count(estimate)

```

```{r}
library(glue)

pov_maps <-
  pov_dta |>
  group_by(year2 = year, type2 = type, estimate2 = estimate) |> 
  nest() |> ungroup() |>  
  (\(x) {
    expand_grid(year2 = x$year2, type2 = x$type2) |> 
      distinct() |> left_join(x, by = join_by(year2, type2))
  })() |> 
  arrange(year2, type2) |> 
  mutate(plot_poverty =
           map(data, 
               ~ fct_map_chreplot(.x, var_fill = "pov",
                                  subtitle_glue = "{estimate}. {type}. {year}", 
                                  legend_glue = "Poverty",
                                  force_breaks = c(0, .1, .15, .2, .25, .3, .35, .4, 0.55)
                                  )
               )) |> 
  mutate(plot_SE =
           map(data, 
               ~ fct_map_chreplot(.x, var_fill = "RMSE", 
                                  subtitle_glue = "{estimate}. {type}. {year}", 
                                  legend_glue = "RMSE (SE)",
                                  force_breaks = c(.005, .02, .03, .035, 
                                                   .04, 0.055, 0.08, .15 ),
                                  label_form = label_number(0.001) 
                                  )))|> 
  mutate(plot_CV =
           map(data, 
               ~ fct_map_chreplot(.x, var_fill = "CV", 
                                  subtitle_glue = "{estimate}. {type}. {year}", 
                                  legend_glue = "CV",
                                  force_breaks = c(0.04, .1, .2, .25, .3, .35, 
                                                   0.4, .45, .5, 0.65),
                                  label_form = label_number(0.01) 
                                        ))) 


pov_plots <-
  pov_dta |>
  group_by(year2 = year, type2 = type) |> 
  nest() |> ungroup() |> arrange(year2, type2) |>
    mutate(plot_povcompare =
           map(
             data,
             ~fct_plot_scatter(
               .x,
               x_var = "direct_pov",
               y_var = "pov",
               colour_var = "estimate",
               x_title_glue = "Direct estimate poverty rate",
               y_title_glue = "Model-based poverty",
               title_glue = "",
               subtitile_glue = "{type}. {year}",
               legendtitle_glue = "Model",
               scale_x_label = label_percent(), expand_x = NULL, expand_y = NULL
             )
           ))

```

## Pov table 1

```{r}
library(modelsummary)
library(flextable)
datasummary(
  year ~ (weighted.mean * Arguments(w = direct_N_pop) + SD) * (estimate) * pov,
  data = 
    pov_dta |>
    mutate(year = as.factor(year)) |>
    filter(str_detect(estimate, "Direct|9|6|MF")) |> 
    rename(SD2 = SD),
  fmt = 4
)
```

# Pov table 2

```{r}
pov_plots |> 
  unnest(data) |> 
  select(id, name, estimate, year, pov) |> 
  pivot_wider(names_from = c(estimate, year),
              values_from = pov) |> 
  mutate(across(where(is.numeric), ~round(., digits =  3))) |> 
  flextable() 
```

# CV table 2

```{r}
pov_plots |> 
  unnest(data) |> 
  select(id, name, estimate, year, CV) |> 
  pivot_wider(names_from = c(estimate, year),
              values_from = CV) |> 
  mutate(across(where(is.numeric), ~round(., digits =  3))) |> 
  flextable() 
```

# Poverty map

```{r}
pov_maps |>
  filter(str_detect(estimate2, "9|6|MF")) |>
  arrange(estimate2) |> 
  filter(year2 %in% c(2019, 2021, 2023)) |>
  pull(plot_poverty) |>
  reduce(~ .x + .y)  +
  patchwork::plot_layout(guides = "collect", nrow = 3) 
```

### Poverty scatter

```{r}
pov_plots |>
  # filter(year2 %in% c(2019, 2023)) |>
  pull(plot_povcompare) |>
  reduce(~ .x + .y)  +
  patchwork::plot_layout(guides = "collect") 
```

# CV map

```{r}
pov_maps |>
  filter(str_detect(estimate2, "Dir|9|6|MF")) |>
  arrange(estimate2) |> 
  filter(year2 %in% c(2022, 2023)) |>
  pull(plot_CV) |>
  reduce(~ .x + .y)  +
  patchwork::plot_layout(guides = "collect", nrow = 3) 
```

# Direct vs Model-based CV

```{r}
library(glue)
pov_dta |> 
  st_drop_geometry() |>
  group_by(year2 = year) |> 
  nest() |> 
  mutate(
    plot = map(data, ~{
      .x |>
        left_join(
          .x |> filter(estimate == "Direct") |> arrange(CV) |>
            mutate(name2 = row_number()) |>
            select(id, name2)
        ) |>
        fct_plot_scatter(
          x_var = "name2",
          y_var = "CV",
          colour_var = "estimate",
          x_title_glue = "Region (ordered by decreasing MSE) ",
          y_title_glue = "Model-based CV",
          title_glue = "",
          subtitile_glue = "{year}",
          legendtitle_glue = "Model",
          scale_x_label = label_percent(1),
          expand_y = c(0, 0.50),
          expand_x = NULL,
          add_smooth = F, add_line = F
        ) +
        scale_x_continuous() +
        # facet_wrap(. ~ year) +
        theme(axis.text.x = element_text(
          angle = 90,
          vjust = 0.5,
          hjust = 1,
          size = 3
        ))
    })
  ) |>
  pull(plot) |>
  reduce(~ .x + .y)  +
  patchwork::plot_layout(guides = "collect") 
```

## Other poverty maps

```{r}
pov_maps |>
  filter(estimate2 %in% c("Direct", "UFH")) |> 
  filter(year2 %in% c(2019, 2021, 2023)) |>
  pull(plot_poverty) |>
  reduce(~ .x + .y)  +
  patchwork::plot_layout(guides = "collect") 
```

```{r}
pov_maps |>
  filter(estimate2 %in% c("UFH")) |> 
  # filter(year2 %in% c(2019, 2021, 2023)) |>
  pull(plot_poverty) |>
  reduce(~ .x + .y)  +
  patchwork::plot_layout(guides = "collect") 
```

## Poverty change by regions 

```{r}
pov_dta |> 
  filter(str_detect(estimate, "Direct|9v2|6"),
         year %in% c(2019, 2023)) |> 
  mutate(Region = name |> as_factor() |> fct_reorder(pov, .desc = T)) |> 
  fct_plot_scatter(
               x_var = "Region",
               y_var = "pov",
               colour_var = "estimate",
               x_title_glue = "Region (Ordered by decreasing pov) ",
               y_title_glue = "Model-based poverty rate",
               title_glue = "",
               # subtitile_glue = "{type}. {year}",
               legendtitle_glue = "Model",
               scale_x_label = label_percent(), 
               expand_x = NULL, 
               expand_y = NULL, 
               add_smooth = F
             ) + 
  scale_x_discrete() +
  facet_wrap(. ~ year) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, 
                                   hjust=1, size = 8))


pov_dta |> 
  mutate(Region = name |> str_remove("PODREGION") |> 
           as_factor() |> fct_reorder(MSE, .desc = T)) |> 
  fct_plot_scatter(
               x_var = "Region",
               y_var = "CV",
               colour_var = "estimate",
               x_title_glue = "Region (Ordered by decreasing MSE) ",
               y_title_glue = "Model-based poverty rate",
               title_glue = "",
               # subtitile_glue = "{type}. {year}",
               legendtitle_glue = "Model",
               scale_x_label = label_percent(), 
               expand_x = NULL, 
               expand_y = NULL, 
               add_smooth = F
             ) + 
  scale_x_discrete() +
  facet_wrap(. ~ year) + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, 
                                   hjust=1, size = 3))
```


```{r}
pov_dta |> 
  filter(str_detect(estimate, "Direct|9v2|6"),
         year %in% c(2019:2023)) |> 
  select(id, name, year, type, estimate, pov, RMSE, CV) |> 
  mutate(group_id = str_c(estimate, year),
         year = as.character(year)) |> 
  pivot_longer(c(pov, CV, RMSE), names_to = "var") |> 
  mutate(
    var = case_when(
      var == "pov" ~ "Poverty rate",
      var == "RMSE" ~ "RMSE (SE)",
      var == "CV" ~ "Coef. of variation",
    ) |>
      as_factor() |>
      fct_relevel("Poverty rate")
  ) |>  
  fct_plot_scatter(
               x_var = "year",
               y_var = "value",
               colour_var = "estimate",
               group_var = "group_id",
               x_title_glue = "Year",
               y_title_glue = "",
               title_glue = "",
               subtitile_glue = "",
               legendtitle_glue = "Estimate",
               scale_y_label = label_percent(0.1),
               scale_x_label = function(x) x,
               expand_x = NULL, 
               expand_y = NULL, 
               add_smooth = F, 
               add_line = F,
               add_point = F,
             ) + 
  facet_wrap(type ~ var, scales = "free") + 
  scale_x_discrete() +
  geom_boxplot(aes(colour = estimate))
```


